[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"/articles/FGLMtrunc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An introduction to `FGLMtrunc`","text":"FGLMtrunc package fits truncated Functional Generalized Linear Models described Liu, Divani, Petersen (2020). implements methods functional linear functional logistic regression models. solution path computed efficiently using active set algorithm warm start. Optimal smoothing truncation parameters (\\(\\lambda_s, \\lambda_t\\)) chosen Bayesian information criterion (BIC). install FGLMtrunc directly CRAN, type R console command: load FGLMtrunc package, type R console: function fitting model fglm_trunc, arguments customize fit. details required arguments: X.curves required matrix functional predictors. Y required response vector. Either nbasis knots needed define interior knots B-spline. Please use ?fglm_trunc details function arguments. demonstrate usages commonly used arguments examples.","code":"install.packages(\"FGLMtrunc\") library(FGLMtrunc)"},{"path":"/articles/FGLMtrunc.html","id":"functional-linear-regression-familygaussian","dir":"Articles","previous_headings":"","what":"Functional Linear Regression (family=\"gaussian\")","title":"An introduction to `FGLMtrunc`","text":"Functional linear regression model default choice function fglm_trunc argument family=\"gaussian\". illustration, use dataset LinearExample, created beforehand following Case simulation studies section Liu et. al. (2020). dataset contains \\(n=200\\) observations, functional predictors observed \\(p=101\\) timepoints \\([0,1]\\) interval. true truncation point \\(\\delta = 0.54\\).","code":"data(LinearExample) Y_linear = LinearExample$Y Xcurves_linear = LinearExample$X.curves timeGrid = seq(0, 1, length.out = 101) plot(timeGrid, LinearExample$beta.true, type = 'l',       main = 'True coefficient function', xlab = \"t\", ylab=expression(beta(t)))"},{"path":"/articles/FGLMtrunc.html","id":"fitting-fglmtrunc-model-for-linear-regression","dir":"Articles","previous_headings":"Functional Linear Regression (family=\"gaussian\")","what":"Fitting FGLMtrunc model for linear regression","title":"An introduction to `FGLMtrunc`","text":"fit model using 50 B-spline basis default degree=3 cubic splines. Since argument grid specified, equally spaced sequence length \\(p=101\\) \\([0,1]\\) interval (including boundaries) automatically used. fglm_trunc also supports parallel computing speed running time tuning regularization parameters. Parallel backend must registered hand. example using parallel doMC backend (run code since available Windows) : One can also manually provides grid knots sequences (). knots specified, nbasis ignored. fit fit2 fitted models results. fit object class FGLMtrunc contains relevant estimation results. Please use ?fglm_trunc details function outputs. Function call truncation point printed print function:","code":"fit = fglm_trunc(Y_linear, Xcurves_linear, nbasis = 50) library(doMC) registerDoMC(cores = 2) fit = fglm_trunc(Y_linear, Xcurves_linear, nbasis = 50, parallel = TRUE) k <- 50 - 3 - 1 #Numbers of knots = nbasis - degree - 1 knots_n <- seq(0, 1, length.out = k+2)[-c(1, k+2)] # Remove boundary knots fit2 = fglm_trunc(Y_linear, Xcurves_linear, grid = timeGrid, knots = knots_n) print(fit) #>  #> Call:  fglm_trunc(Y = Y_linear, X.curves = Xcurves_linear, nbasis = 50)  #>  #>  #> Optimal truncation point: 0.52"},{"path":"/articles/FGLMtrunc.html","id":"plotting-with-fitted-fglmtrunc-model","dir":"Articles","previous_headings":"Functional Linear Regression (family=\"gaussian\")","what":"Plotting with fitted FGLMtrunc model","title":"An introduction to `FGLMtrunc`","text":"can visualize estimates functional parameter \\(\\beta\\) directly plot:  plot shows smoothing truncated estimates \\(\\beta\\). can set argument include_smooth=FALSE show truncated estimate.","code":"plot(fit)"},{"path":"/articles/FGLMtrunc.html","id":"predicting-with-fitted-fglmtrunc-model","dir":"Articles","previous_headings":"Functional Linear Regression (family=\"gaussian\")","what":"Predicting with fitted FGLMtrunc model","title":"An introduction to `FGLMtrunc`","text":"Predict method FGLMtrunc fits works similar predict.glm. Type \"link\" default choice FGLMtrunc object. linear regression, type \"link\" \"response\" return fitted values. newX.curves required predictions. get truncated estimate \\(\\beta\\), can use either fit$beta.truncated predict function:","code":"predict(fit, newX.curves = Xcurves_linear[1:5,]) #>            [,1] #> [1,]  2.1337413 #> [2,]  1.2286605 #> [3,]  1.8207552 #> [4,] -0.2430198 #> [5,]  0.5901628 predict(fit, type = \"coefficients\") #>   [1] -1.194642e+00 -1.233189e+00 -1.274041e+00 -1.321971e+00 -1.382684e+00 #>   [6] -1.461724e+00 -1.560226e+00 -1.676778e+00 -1.806592e+00 -1.942359e+00 #>  [11] -2.075460e+00 -2.195993e+00 -2.293871e+00 -2.358836e+00 -2.381285e+00 #>  [16] -2.352969e+00 -2.266606e+00 -2.117256e+00 -1.901351e+00 -1.619372e+00 #>  [21] -1.273650e+00 -8.713600e-01 -4.219470e-01  6.139018e-02  5.633530e-01 #>  [26]  1.068248e+00  1.560120e+00  2.023704e+00  2.444542e+00  2.810437e+00 #>  [31]  3.112588e+00  3.344368e+00  3.503214e+00  3.588157e+00  3.601536e+00 #>  [36]  3.546803e+00  3.429575e+00  3.256279e+00  3.034685e+00  2.773190e+00 #>  [41]  2.481013e+00  2.167832e+00  1.843081e+00  1.516008e+00  1.196723e+00 #>  [46]  8.962979e-01  6.237543e-01  3.847519e-01  1.897238e-01  6.071026e-02 #>  [51]  8.314897e-03  1.796018e-06  0.000000e+00  0.000000e+00  0.000000e+00 #>  [56]  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 ...."},{"path":"/articles/FGLMtrunc.html","id":"functional-logistic-regression-familybinomial","dir":"Articles","previous_headings":"","what":"Functional Logistic Regression (family=\"binomial\")","title":"An introduction to `FGLMtrunc`","text":"logistic regression, use dataset LogisticExample, similar LinearExample, response \\(Y\\) generated Bernoulli random variable.","code":"data(LogisticExample) Y_logistic = LogisticExample$Y Xcurves_logistic = LogisticExample$X.curves"},{"path":"/articles/FGLMtrunc.html","id":"fitting-fglmtrunc-model-for-logistic-regression","dir":"Articles","previous_headings":"Functional Logistic Regression (family=\"binomial\")","what":"Fitting FGLMtrunc model for logistic regression","title":"An introduction to `FGLMtrunc`","text":"Similarly, fit model using 50 B-spline basis default choice cubic splines. need set family=\"binomial\" logistic regression. Printing plotting .","code":"fit4 = fglm_trunc(Y_logistic, Xcurves_logistic, family=\"binomial\", nbasis = 50) print(fit4) #>  #> Call:  fglm_trunc(Y = Y_logistic, X.curves = Xcurves_logistic, family = \"binomial\", nbasis = 50)  #>  #>  #> Optimal truncation point: 0.58 plot(fit4)"},{"path":"/articles/FGLMtrunc.html","id":"predicting-with-fitted-fglmtrunc-model-for-logistic-regression","dir":"Articles","previous_headings":"Functional Logistic Regression (family=\"binomial\")","what":"Predicting with fitted FGLMtrunc model for logistic regression","title":"An introduction to `FGLMtrunc`","text":"functional logistic regression, type option returns different prediction: type=\"link\" gives linear predictors log-odds. type=\"response\" gives predicted probabilities. type=\"coefficients\" gives truncated estimate functional parameter \\(\\beta\\) .","code":"logistic_link_pred = predict(fit4, newX.curves = Xcurves_logistic, type=\"link\") plot(logistic_link_pred, ylab=\"log-odds\") logistic_response_pred = predict(fit4, newX.curves = Xcurves_logistic, type=\"response\") plot(logistic_response_pred, ylab=\"predicted probabilities\")"},{"path":[]},{"path":"/articles/FGLMtrunc.html","id":"fitting-fglmtrunc-model","dir":"Articles","previous_headings":"Functional Linear Regression with scalar predictors","what":"Fitting FGLMtrunc model","title":"An introduction to `FGLMtrunc`","text":"FGLMtrunc allows using scalar predictors together functional predictors. First, randomly generate observations scalar predictors: Next, modify response vector LinearExample takes account scalar predictors: fit FGLMtrunc model matrix scalar predictors S: Fitted coefficients scalar predictors close true values.","code":"scalar_coef <- c(1, -1, 0.5) # True coefficients for scalar predictors set.seed(1234) S <- cbind(matrix(rnorm(400), nrow=200), rbinom(200, 1, 0.5))  # Randomly generated observations for scalar predictors. Binary coded as 0 and 1. colnames(S) <- c(\"s1\", \"s2\", \"s3\") Y_scalar <- Y_linear + (S %*% scalar_coef) fit_scalar = fglm_trunc(X.curves=Xcurves_linear, Y=Y_scalar, S=S, nbasis = 50) fit_scalar #>  #> Call:  fglm_trunc(Y = Y_scalar, X.curves = Xcurves_linear, S = S, nbasis = 50)  #>  #>  Intercept      s1      s2     s3 #>     1.0865  1.0937 -1.0411 0.4233 #>  #> Optimal truncation point: 0.49"},{"path":"/articles/FGLMtrunc.html","id":"predicting-with-scalar-predictors","dir":"Articles","previous_headings":"Functional Linear Regression with scalar predictors","what":"Predicting with scalar predictors","title":"An introduction to `FGLMtrunc`","text":"make prediction fitted model using scalar predictors, need specified argument newS:","code":"predict(fit_scalar, newX.curves = Xcurves_linear[1:5,], newS=S[1:5,]) #>            [,1] #> [1,]  0.3837103 #> [2,]  1.2553910 #> [3,]  3.2764746 #> [4,] -3.4882131 #> [5,]  0.7946992"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xi Liu. Author. Chau Tran. Author, maintainer. Alexander Petersen. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu X, Tran C, Petersen (2022). FGLMtrunc: Truncated Functional Generalized Linear Models. R package version 0.1.0.","code":"@Manual{,   title = {FGLMtrunc: Truncated Functional Generalized Linear Models},   author = {Xi Liu and Chau Tran and Alexander Petersen},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"fglmtrunc","dir":"","previous_headings":"","what":"Truncated Functional Generalized Linear Models","title":"Truncated Functional Generalized Linear Models","text":"FGLMtrunc package contains implementation methodologies described Xi Liu, Afshin . Divani, Alexander Petersen (2022), including truncated functional linear truncated functional logistic regression models. install FGLMtrunc github, type R console read Introduction FGLMtrunc package vignette, type R console","code":"devtools::install_github(\"cbtran/FGLMtrunc\", build_vignettes = TRUE) browseVignettes(\"FGLMtrunc\")"},{"path":"/reference/LinearExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data for functional linear regression. — LinearExample","title":"Simulated data for functional linear regression. — LinearExample","text":"Randomly generated data Gaussian responses functional linear regression example follows Case Liu et. al. (2022).","code":""},{"path":"/reference/LinearExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data for functional linear regression. — LinearExample","text":"","code":"data(LinearExample)"},{"path":"/reference/LinearExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data for functional linear regression. — LinearExample","text":"List containing following elements: X.curves 200 101 matrix functional predictors. Y 200 1 numeric vector Gaussian responses. beta.true true functional parameter \\(\\beta\\).","code":""},{"path":"/reference/LinearExample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated data for functional linear regression. — LinearExample","text":"Xi Liu, Afshin . Divani, Alexander Petersen. \"Truncated estimation functional generalized linear regression models\" (2022). Computational Statistics & Data Analysis.","code":""},{"path":"/reference/LogisticExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data for functional logistic regression. — LogisticExample","title":"Simulated data for functional logistic regression. — LogisticExample","text":"Randomly generated data Bernoulli responses functional logistic regression example follows Case Liu et. al. (2022).","code":""},{"path":"/reference/LogisticExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data for functional logistic regression. — LogisticExample","text":"","code":"data(LogisticExample)"},{"path":"/reference/LogisticExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data for functional logistic regression. — LogisticExample","text":"List containing following elements: X.curves 200 101 matrix functional predictors. Y 200 1 numeric vector Bernoulli responses. beta.true true functional parameter \\(\\beta\\).","code":""},{"path":"/reference/LogisticExample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated data for functional logistic regression. — LogisticExample","text":"Xi Liu, Afshin . Divani, Alexander Petersen. \"Truncated estimation functional generalized linear regression models\" (2022). Computational Statistics & Data Analysis.","code":""},{"path":"/reference/fglm_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"Fit truncated functional linear logistic regression model using nested group lasso penalty. solution path computed efficiently using active set algorithm warm start. Optimal tuning parameters (\\(\\lambda_s, \\lambda_t\\)) chosen Bayesian information criterion (BIC).","code":""},{"path":"/reference/fglm_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"","code":"fglm_trunc(   Y,   X.curves,   S = NULL,   grid = NULL,   family = c(\"gaussian\", \"binomial\"),   degree = 3,   nbasis = NULL,   knots = NULL,   nlambda.s = 10,   lambda.s.seq = NULL,   precision = 1e-05,   parallel = FALSE )"},{"path":"/reference/fglm_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"Y n--1 vector response. row observed scalar response, continous family=\"gaussian\" binary (.e. 0 1) family=\"binomal\". X.curves n--p matrix functional predictors. row observation vector p finite points [0,T] T>0. S (optional) n--s matrix scalar predictors. Binary variable coded numeric rather factor. grid sequence p points X recorded, including boundaries 0 T. specified, equally spaced sequence length p 0 1 used. family Choice exponential family model. function uses corresponding canonical link function fit model. degree Degree piecewise polynomial. Default 3 cubic splines. nbasis Number B-spline basis. knots unspecified, function choose nbasis - degree - 1 internal knots suitable quantiles grid. knots specified, value nbasis ignored. knots k internal breakpoints define spline. nlambda.s (optional) Length sequence smoothing regularization parameters. Default 10. lambda.s.seq (optional) Sequence smoothing regularization parameters. precision (optional) Error tolerance optimization. Default 1e-5. parallel (optional) TRUE, use parallel foreach fit value lambda.s.seq. Must register parallel hand, doMC others.","code":""},{"path":"/reference/fglm_trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"list components: grid grid sequence used. knots knots sequence used. degree degree piecewise polynomial used. eta.0 Estimate B-spline coefficients \\(\\eta\\) without truncation penalty. beta.0 Estimate functional parameter \\(\\beta\\) without truncation penalty. eta.truncated Estimate B-spline coefficients \\(\\eta\\) truncation penalty. beta.truncated Estimate functional parameter \\(\\beta\\) truncation penalty. lambda.s0 Optimal smoothing regularization parameter without truncation chosen GCV. lambda.s Optimal smoothing regularization parameter truncation chosen BIC. lambda.t Optimal truncation regularization parameter chosen BIC. trunc.point Truncation point \\(\\delta\\) \\(\\beta(t)\\) = 0 \\(t \\ge \\delta\\). alpha Intercept (coefficients scalar predictors used) truncated model. scalar.pred Logical variable indicating whether scalar predictor used.","code":""},{"path":[]},{"path":"/reference/fglm_trunc.html","id":"details-on-spline-estimator","dir":"Reference","previous_headings":"","what":"Details on spline estimator","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"order q B-splines (q = degree + 1 since intercept used) k internal knots 0 < t_1 <...< t_k < T, number B-spline basis equals q + k. Without truncation (\\(\\lambda\\)_t=0), function returns smoothing estimate equivalent method Cardot Sarda (2005), optimal smoothing parameter chosen Generalized Cross Validation (GCV).","code":""},{"path":"/reference/fglm_trunc.html","id":"details-on-family","dir":"Reference","previous_headings":"","what":"Details on family","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"model can work Gaussian Bernoulli responses. family=\"gaussian\", identity link used. family=\"binomial\", logit link used.","code":""},{"path":"/reference/fglm_trunc.html","id":"details-on-scalar-predictors","dir":"Reference","previous_headings":"","what":"Details on scalar predictors","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"FGLMtrunc allows using scalar predictors together functional predictors. scalar predictors used, estimated coefficients included alpha form fitted model.","code":""},{"path":"/reference/fglm_trunc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"Xi Liu, Afshin . Divani, Alexander Petersen. \"Truncated estimation functional generalized linear regression models\" (2022). Computational Statistics & Data Analysis. Hervé Cardot Pacal Sarda. \"Estimation generalized linear models functional data via penalized likelihood\" (2005). Journal Multivariate Analysis.","code":""},{"path":[]},{"path":"/reference/fglm_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a truncated Functional Generalized Linear Model — fglm_trunc","text":"","code":"# Gaussian response data(LinearExample) Y_linear = LinearExample$Y Xcurves_linear = LinearExample$X.curves fit1 = fglm_trunc(Y_linear, Xcurves_linear, nbasis = 50) print(fit1) #>  #> Call:  fglm_trunc(Y = Y_linear, X.curves = Xcurves_linear, nbasis = 50)  #>  #>  #> Optimal truncation point: 0.52  plot(fit1)   # Bernoulli response data(LogisticExample) Y_logistic = LogisticExample$Y Xcurves_logistic = LogisticExample$X.curves fit2 = fglm_trunc(Y_logistic, Xcurves_logistic, family=\"binomial\", nbasis = 50) print(fit2) #>  #> Call:  fglm_trunc(Y = Y_logistic, X.curves = Xcurves_logistic, family = \"binomial\", nbasis = 50)  #>  #>  #> Optimal truncation point: 0.58  plot(fit2)   # Parallel (NOT RUN) # require(doMC) # registerDoMC(cores = 4) # fit3 = fglm_trunc(Y_linear, Xcurves_linear, nbasis = 50, parallel = TRUE)"},{"path":"/reference/plot.FGLMtrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot functional parameters \\(\\beta\\) from a FGLMtrunc object — plot.FGLMtrunc","title":"Plot functional parameters \\(\\beta\\) from a FGLMtrunc object — plot.FGLMtrunc","text":"Plot functional parameters \\(\\beta\\) function \\(t\\) fitted FGLMtrunc object.","code":""},{"path":"/reference/plot.FGLMtrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot functional parameters \\(\\beta\\) from a FGLMtrunc object — plot.FGLMtrunc","text":"","code":"# S3 method for FGLMtrunc plot(x, include_smooth = TRUE, ...)"},{"path":"/reference/plot.FGLMtrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot functional parameters \\(\\beta\\) from a FGLMtrunc object — plot.FGLMtrunc","text":"x fitted FGLMtrunc object include_smooth TRUE, smoothing estimate without truncation \\(\\beta\\) plotted. ... additional plot arguments","code":""},{"path":"/reference/predict.FGLMtrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions from FGLMtrunc fitted model — predict.FGLMtrunc","title":"Make predictions from FGLMtrunc fitted model — predict.FGLMtrunc","text":"function returns truncated estimate linear predictors, fitted values, functional parameter \\(\\beta\\) fitted FGLMtrunc object.","code":""},{"path":"/reference/predict.FGLMtrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions from FGLMtrunc fitted model — predict.FGLMtrunc","text":"","code":"# S3 method for FGLMtrunc predict(   object,   newX.curves,   newS = NULL,   type = c(\"link\", \"response\", \"coefficients\"),   ... )"},{"path":"/reference/predict.FGLMtrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make predictions from FGLMtrunc fitted model — predict.FGLMtrunc","text":"object fitted FGLMtrunc object newX.curves Matrix new values functional predictors X.curves. newS Matrix new values scalar predictors S. type Type prediction. logistic regression (family = \"binomial\"), type=\"link\" gives linear predictors, log-odds, type=\"response\" gives predicted probabilities. linear regression (family = \"gaussian\"), type=\"link\"  type=\"response\" give fitted values. linear regression logistic regression, type=\"coefficients\" gives truncated estimate functional parameter \\(\\beta\\). ... additional predict arguments (applicable FGLMtrunc)","code":""},{"path":"/reference/predict.FGLMtrunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions from FGLMtrunc fitted model — predict.FGLMtrunc","text":"Predictions depends chosen type.","code":""},{"path":[]},{"path":"/reference/print.FGLMtrunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a FGLMtrunc object — print.FGLMtrunc","title":"Print a FGLMtrunc object — print.FGLMtrunc","text":"Print summary truncation point fitted FGLMtrunc model.","code":""},{"path":"/reference/print.FGLMtrunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a FGLMtrunc object — print.FGLMtrunc","text":"","code":"# S3 method for FGLMtrunc print(x, digits = max(3, getOption(\"digits\") - 3), ...)"},{"path":"/reference/print.FGLMtrunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a FGLMtrunc object — print.FGLMtrunc","text":"x fitted FGLMtrunc object digits significant digits printout ... additional print arguments","code":""},{"path":"/reference/print.FGLMtrunc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a FGLMtrunc object — print.FGLMtrunc","text":"Truncation point estimate \\(\\delta\\) printed.","code":""}]
